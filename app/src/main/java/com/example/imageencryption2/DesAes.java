package com.example.imageencryption2;

import android.util.Log;

import java.util.Arrays;

public class DesAes {

    // Initialize initial permutation table of DES Algorithm
    private static int[] desPerm = {58, 50, 42, 34, 26, 18, 10, 2,
            60, 52, 44, 36, 28, 20, 12, 4,
            62, 54, 46, 38, 30, 22, 14, 6,
            64, 56, 48, 40, 32, 24, 16, 8,
            57, 49, 41, 33, 25, 17, 9, 1,
            59, 51, 43, 35, 27, 19, 11, 3,
            61, 53, 45, 37, 29, 21, 13, 5,
            63, 55, 47, 39, 31, 23, 15, 7};

    /***
     *  STEP 8
     * A permutation table (PerTab) with size of
     * 16 â‡¥ 32 has been generated by randomly combining
     * transposed version of DES s-box tables.
     */
    public static int[][] desGenerator() {

        int[][] s1 = new int[][]{
                {14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
                {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
                {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
                {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};

        s1 = transpose(s1);

        int[][] s2 = {
                {15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
                {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
                {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
                {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};

        s2 = transpose(s2);

        int[][] s3 = {
                {10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8},
                {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
                {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7},
                {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};

        s3 = transpose(s3);

        int[][] s4 = {
                {7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
                {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
                {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
                {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};

        s4 = transpose(s4);

        int[][] s5 = {
                {2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
                {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
                {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
                {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};

        s5 = transpose(s5);

        int[][] s6 = {
                {12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
                {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
                {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
                {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};

        s6 = transpose(s6);

        int[][] s7 = {
                {4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1},
                {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6},
                {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2},
                {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};

        s7 = transpose(s7);

        int[][] s8 = {
                {13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
                {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2},
                {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8},
                {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};

        s8 = transpose(s8);

        Log.i("s1Transpoze", Arrays.deepToString(concatAll(s1, s2, s3, s4, s5, s6, s7, s8)) + "");

        //perTab= concatAll(s1, s2, s3, s4, s5, s6, s7, s8);
        return concatAll(s1, s2, s3, s4, s5, s6, s7, s8);
    }

    public static int[][] aesGenerator() {

        int[][] sBox = new int[][]{
                {0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76},
                {0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0},
                {0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15},
                {0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75},
                {0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84},
                {0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF},
                {0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8},
                {0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2},
                {0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73},
                {0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB},
                {0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79},
                {0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08},
                {0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A},
                {0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E},
                {0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF},
                {0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16}};

        Log.i("aesGenerator", Arrays.deepToString(sBox));

        return sBox;

    }

    /**
     * Shifting AES S-Box rows using selected columns from perTab Array
     *
     * @param {integer} a - Random generated number
     * @return {NdArray}  Return AES S-Box Array after shifting rows .
     */
    public static int[][] shiftRows(int a) {

        // Get column a from perTab array
        int[] colA = getColumn(desGenerator(), a);

        // Clone original Aes SBox Array
        int[][] aesBox = aesGenerator().clone();

        for (int i = 0; i < colA.length; i++) {
            // Get row at indexed i
            int[] row1 = aesBox[i];
            // Get row at indexed colA[i]
            int[] row2 = aesBox[colA[i]];

            // row[i] = row[colA[i]]
            aesBox[i] = row2;
            aesBox[colA[i]] = row1;
        }

        Log.i("shiftRows", Arrays.deepToString(aesBox));

        return aesBox; //The dimensions of this new array: 16x16
    }

    /**
     * Shifting AES S-Box columns using selected columns from perTab Array
     *
     * @param {integer} b - Random generated number
     * @return {NdArray}  Return AES S-Box Array after shifting columns .
     */
    public static int[][] shiftColumns(int b) {

        // Get column a from perTab array
        int[] colA = getColumn(desGenerator(), b);

        // Clone original Aes SBox Array
        int[][] aesBox = aesGenerator().clone();

        for (int i = 0; i < colA.length; i++) {
            // Get column at indexed i
            int[] col1 = aesBox[i];
            // Get column at indexed colA[i]
            int[] col2 = aesBox[colA[i]];

            // col[i] = col[colA[i]]
            aesBox[i] = col2;
            aesBox[colA[i]] = col1;
        }

        Log.i("shiftColumns", Arrays.deepToString(aesBox));

        return aesBox; //The dimensions of this new array: 16x16
    }

    public static void desPermutation(byte[] block, int part) {
        // Calculate indexs
        int firstIndex = part * 64;
        int lastIndex = firstIndex + 64;
        // Fetch subblock from block array
        byte[] subBlock = Arrays.copyOfRange(block, firstIndex, lastIndex);
        // Permutate using initial permuation table of DES Algorithm
        for (int i = 0; i < desPerm.length; i++) {

            block[firstIndex + i] = subBlock[desPerm[i] - 1];
            // We substact desPerm[i] - 1 beacuse permutation table of DES has not zero based index
        }

    }

    public static int[] getColumn(int[][] array, int index) {
        int[] column = new int[array[0].length]; // for a rectangular 2D array!
        for (int i = 0; i < column.length; i++) {
            column[i] = array[i][index];
        }
        return column;
    }

    private static int[][] transpose(int[][] matrix) {

        int width = matrix.length;
        int height = matrix[0].length;

        int[][] array_new = new int[height][width];


        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                array_new[j][i] = matrix[i][j];
            }
        }

        return array_new;
    }

    public static <T> T[] concatAll(T[] first, T[]... rest) {
        int totalLength = first.length;
        for (T[] array : rest) {
            totalLength += array.length;
        }
        T[] result = Arrays.copyOf(first, totalLength);
        int offset = first.length;
        for (T[] array : rest) {
            System.arraycopy(array, 0, result, offset, array.length);
            offset += array.length;
        }

        return result;
    }

}
